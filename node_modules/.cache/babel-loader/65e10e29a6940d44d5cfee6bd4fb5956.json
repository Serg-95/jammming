{"ast":null,"code":"const clientId = 'f1f2de1d319c4f4e8c5f26efc954b279';\nconst redirectUri = \"http://localhost:3000/\";\nlet accessToken;\nconst Spotify = {\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    } //check for access token match\n\n\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]); //This clears the parameters, allowing us to grab a new access token when it expires.\n\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    return fetch('https://api.spotify.com/v1/me');\n  }\n\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId"],"sources":["C:/Users/Сергій/Desktop/Development_folder/Projects/react_projects/jammming/src/util/Spotify.js"],"sourcesContent":["\r\nconst clientId = 'f1f2de1d319c4f4e8c5f26efc954b279'\r\nconst redirectUri = \"http://localhost:3000/\"\r\n\r\nlet accessToken\r\n\r\nconst Spotify = {\r\n\r\n\r\ngetAccessToken() {\r\n    if (accessToken) {\r\n        return accessToken\r\n    }\r\n\r\n    //check for access token match\r\n\r\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/)\r\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/)\r\n\r\n    if (accessTokenMatch && expiresInMatch) {\r\n        accessToken = accessTokenMatch[1]\r\n        const expiresIn = Number(expiresInMatch[1])\r\n        //This clears the parameters, allowing us to grab a new access token when it expires.\r\n        window.setTimeout(() => accessToken = '', expiresIn * 1000)\r\n        window.history.pushState('Access Token', null, '/');\r\n        return accessToken\r\n    } else {\r\n        const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`\r\n        window.location = accessUrl\r\n    }\r\n},    \r\n\r\nsearch(term) {\r\n   const accessToken = Spotify.getAccessToken()\r\n   return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, \r\n          {headers: { Authorization: `Bearer ${accessToken}` } }).then(response => {\r\n            return response.json()\r\n          }).then(jsonResponse => {\r\n            if(!jsonResponse.tracks) {\r\n                return []\r\n            } \r\n            return jsonResponse.tracks.items.map(track => ({\r\n                id: track.id,\r\n                name: track.name,\r\n                artist: track.artists[0].name,\r\n                album: track.album.name,\r\n                uri: track.uri\r\n            }))\r\n          })\r\n},\r\n\r\nsavePlaylist(name, trackUris) {\r\n    if(!name || !trackUris.length) {\r\n        return\r\n    }\r\n\r\n    const accessToken = Spotify.getAccessToken()\r\n    const headers = { Authorization: `Bearer ${accessToken}` }\r\n    let userId\r\n\r\n    return fetch('https://api.spotify.com/v1/me', )\r\n\r\n}\r\n\r\n}\r\n\r\nexport default Spotify "],"mappings":"AACA,MAAMA,QAAQ,GAAG,kCAAjB;AACA,MAAMC,WAAW,GAAG,wBAApB;AAEA,IAAIC,WAAJ;AAEA,MAAMC,OAAO,GAAG;EAGhBC,cAAc,GAAG;IACb,IAAIF,WAAJ,EAAiB;MACb,OAAOA,WAAP;IACH,CAHY,CAKb;;;IAEA,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAAzB;IACA,MAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;IAEA,IAAIJ,gBAAgB,IAAIK,cAAxB,EAAwC;MACpCR,WAAW,GAAGG,gBAAgB,CAAC,CAAD,CAA9B;MACA,MAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB,CAFoC,CAGpC;;MACAJ,MAAM,CAACO,UAAP,CAAkB,MAAMX,WAAW,GAAG,EAAtC,EAA0CS,SAAS,GAAG,IAAtD;MACAL,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;MACA,OAAOb,WAAP;IACH,CAPD,MAOO;MACH,MAAMc,SAAS,GAAI,oDAAmDhB,QAAS,kEAAiEC,WAAY,EAA5J;MACAK,MAAM,CAACC,QAAP,GAAkBS,SAAlB;IACH;EACJ,CAxBe;;EA0BhBC,MAAM,CAACC,IAAD,EAAO;IACV,MAAMhB,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACA,OAAOe,KAAK,CAAE,kDAAiDD,IAAK,EAAxD,EACL;MAACE,OAAO,EAAE;QAAEC,aAAa,EAAG,UAASnB,WAAY;MAAvC;IAAV,CADK,CAAL,CACwDoB,IADxD,CAC6DC,QAAQ,IAAI;MACvE,OAAOA,QAAQ,CAACC,IAAT,EAAP;IACD,CAHD,EAGGF,IAHH,CAGQG,YAAY,IAAI;MACtB,IAAG,CAACA,YAAY,CAACC,MAAjB,EAAyB;QACrB,OAAO,EAAP;MACH;;MACD,OAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,KAAK;QAC3CC,EAAE,EAAED,KAAK,CAACC,EADiC;QAE3CC,IAAI,EAAEF,KAAK,CAACE,IAF+B;QAG3CC,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHkB;QAI3CG,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJwB;QAK3CI,GAAG,EAAEN,KAAK,CAACM;MALgC,CAAL,CAAnC,CAAP;IAOD,CAdD,CAAP;EAeF,CA3Ce;;EA6ChBC,YAAY,CAACL,IAAD,EAAOM,SAAP,EAAkB;IAC1B,IAAG,CAACN,IAAD,IAAS,CAACM,SAAS,CAACC,MAAvB,EAA+B;MAC3B;IACH;;IAED,MAAMpC,WAAW,GAAGC,OAAO,CAACC,cAAR,EAApB;IACA,MAAMgB,OAAO,GAAG;MAAEC,aAAa,EAAG,UAASnB,WAAY;IAAvC,CAAhB;IACA,IAAIqC,MAAJ;IAEA,OAAOpB,KAAK,CAAC,+BAAD,CAAZ;EAEH;;AAxDe,CAAhB;AA4DA,eAAehB,OAAf"},"metadata":{},"sourceType":"module"}